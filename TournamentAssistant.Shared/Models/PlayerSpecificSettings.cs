// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/Models/player_specific_settings.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TournamentAssistantShared.Models {

  /// <summary>Holder for reflection information generated from protobuf/Models/player_specific_settings.proto</summary>
  public static partial class PlayerSpecificSettingsReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/Models/player_specific_settings.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerSpecificSettingsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5wcm90b2J1Zi9Nb2RlbHMvcGxheWVyX3NwZWNpZmljX3NldHRpbmdzLnBy",
            "b3RvEiBUb3VybmFtZW50QXNzaXN0YW50U2hhcmVkLk1vZGVscyKzAwoWUGxh",
            "eWVyU3BlY2lmaWNTZXR0aW5ncxIVCg1wbGF5ZXJfaGVpZ2h0GAEgASgCEhIK",
            "CnNmeF92b2x1bWUYAiABKAISHQoVc2FiZXJfdHJhaWxfaW50ZW5zaXR5GAMg",
            "ASgCEiMKG25vdGVfanVtcF9zdGFydF9iZWF0X29mZnNldBgEIAEoAhJXCgdv",
            "cHRpb25zGAUgASgOMkYuVG91cm5hbWVudEFzc2lzdGFudFNoYXJlZC5Nb2Rl",
            "bHMuUGxheWVyU3BlY2lmaWNTZXR0aW5ncy5QbGF5ZXJPcHRpb25zItABCg1Q",
            "bGF5ZXJPcHRpb25zEggKBE5vbmUQABIOCgpMZWZ0SGFuZGVkEAESEAoMU3Rh",
            "dGljTGlnaHRzEAISCQoFTm9IdWQQBBIPCgtBZHZhbmNlZEh1ZBAIEhAKDFJl",
            "ZHVjZURlYnJpcxAQEhQKEEF1dG9QbGF5ZXJIZWlnaHQQIBIRCg1Ob0ZhaWxF",
            "ZmZlY3RzEEASEAoLQXV0b1Jlc3RhcnQQgAESGAoTSGlkZU5vdGVTcGF3bkVm",
            "ZmVjdBCAAhIQCgtBZGFwdGl2ZVNmeBCABEIjqgIgVG91cm5hbWVudEFzc2lz",
            "dGFudFNoYXJlZC5Nb2RlbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TournamentAssistantShared.Models.PlayerSpecificSettings), global::TournamentAssistantShared.Models.PlayerSpecificSettings.Parser, new[]{ "PlayerHeight", "SfxVolume", "SaberTrailIntensity", "NoteJumpStartBeatOffset", "Options" }, null, new[]{ typeof(global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerSpecificSettings : pb::IMessage<PlayerSpecificSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlayerSpecificSettings> _parser = new pb::MessageParser<PlayerSpecificSettings>(() => new PlayerSpecificSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSpecificSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TournamentAssistantShared.Models.PlayerSpecificSettingsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSpecificSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSpecificSettings(PlayerSpecificSettings other) : this() {
      playerHeight_ = other.playerHeight_;
      sfxVolume_ = other.sfxVolume_;
      saberTrailIntensity_ = other.saberTrailIntensity_;
      noteJumpStartBeatOffset_ = other.noteJumpStartBeatOffset_;
      options_ = other.options_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSpecificSettings Clone() {
      return new PlayerSpecificSettings(this);
    }

    /// <summary>Field number for the "player_height" field.</summary>
    public const int PlayerHeightFieldNumber = 1;
    private float playerHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlayerHeight {
      get { return playerHeight_; }
      set {
        playerHeight_ = value;
      }
    }

    /// <summary>Field number for the "sfx_volume" field.</summary>
    public const int SfxVolumeFieldNumber = 2;
    private float sfxVolume_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SfxVolume {
      get { return sfxVolume_; }
      set {
        sfxVolume_ = value;
      }
    }

    /// <summary>Field number for the "saber_trail_intensity" field.</summary>
    public const int SaberTrailIntensityFieldNumber = 3;
    private float saberTrailIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SaberTrailIntensity {
      get { return saberTrailIntensity_; }
      set {
        saberTrailIntensity_ = value;
      }
    }

    /// <summary>Field number for the "note_jump_start_beat_offset" field.</summary>
    public const int NoteJumpStartBeatOffsetFieldNumber = 4;
    private float noteJumpStartBeatOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NoteJumpStartBeatOffset {
      get { return noteJumpStartBeatOffset_; }
      set {
        noteJumpStartBeatOffset_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 5;
    private global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions options_ = global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSpecificSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSpecificSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayerHeight, other.PlayerHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SfxVolume, other.SfxVolume)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SaberTrailIntensity, other.SaberTrailIntensity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NoteJumpStartBeatOffset, other.NoteJumpStartBeatOffset)) return false;
      if (Options != other.Options) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayerHeight);
      if (SfxVolume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SfxVolume);
      if (SaberTrailIntensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SaberTrailIntensity);
      if (NoteJumpStartBeatOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NoteJumpStartBeatOffset);
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) hash ^= Options.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerHeight != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PlayerHeight);
      }
      if (SfxVolume != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SfxVolume);
      }
      if (SaberTrailIntensity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SaberTrailIntensity);
      }
      if (NoteJumpStartBeatOffset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(NoteJumpStartBeatOffset);
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerHeight != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PlayerHeight);
      }
      if (SfxVolume != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SfxVolume);
      }
      if (SaberTrailIntensity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SaberTrailIntensity);
      }
      if (NoteJumpStartBeatOffset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(NoteJumpStartBeatOffset);
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Options);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerHeight != 0F) {
        size += 1 + 4;
      }
      if (SfxVolume != 0F) {
        size += 1 + 4;
      }
      if (SaberTrailIntensity != 0F) {
        size += 1 + 4;
      }
      if (NoteJumpStartBeatOffset != 0F) {
        size += 1 + 4;
      }
      if (Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Options);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSpecificSettings other) {
      if (other == null) {
        return;
      }
      if (other.PlayerHeight != 0F) {
        PlayerHeight = other.PlayerHeight;
      }
      if (other.SfxVolume != 0F) {
        SfxVolume = other.SfxVolume;
      }
      if (other.SaberTrailIntensity != 0F) {
        SaberTrailIntensity = other.SaberTrailIntensity;
      }
      if (other.NoteJumpStartBeatOffset != 0F) {
        NoteJumpStartBeatOffset = other.NoteJumpStartBeatOffset;
      }
      if (other.Options != global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions.None) {
        Options = other.Options;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PlayerHeight = input.ReadFloat();
            break;
          }
          case 21: {
            SfxVolume = input.ReadFloat();
            break;
          }
          case 29: {
            SaberTrailIntensity = input.ReadFloat();
            break;
          }
          case 37: {
            NoteJumpStartBeatOffset = input.ReadFloat();
            break;
          }
          case 40: {
            Options = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            PlayerHeight = input.ReadFloat();
            break;
          }
          case 21: {
            SfxVolume = input.ReadFloat();
            break;
          }
          case 29: {
            SaberTrailIntensity = input.ReadFloat();
            break;
          }
          case 37: {
            NoteJumpStartBeatOffset = input.ReadFloat();
            break;
          }
          case 40: {
            Options = (global::TournamentAssistantShared.Models.PlayerSpecificSettings.Types.PlayerOptions) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerSpecificSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PlayerOptions {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("LeftHanded")] LeftHanded = 1,
        [pbr::OriginalName("StaticLights")] StaticLights = 2,
        [pbr::OriginalName("NoHud")] NoHud = 4,
        [pbr::OriginalName("AdvancedHud")] AdvancedHud = 8,
        [pbr::OriginalName("ReduceDebris")] ReduceDebris = 16,
        [pbr::OriginalName("AutoPlayerHeight")] AutoPlayerHeight = 32,
        [pbr::OriginalName("NoFailEffects")] NoFailEffects = 64,
        [pbr::OriginalName("AutoRestart")] AutoRestart = 128,
        [pbr::OriginalName("HideNoteSpawnEffect")] HideNoteSpawnEffect = 256,
        [pbr::OriginalName("AdaptiveSfx")] AdaptiveSfx = 512,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
