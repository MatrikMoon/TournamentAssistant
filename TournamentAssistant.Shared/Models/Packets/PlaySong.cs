// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/Models/Packets/play_song.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TournamentAssistantShared.Models.Packets {

  /// <summary>Holder for reflection information generated from protobuf/Models/Packets/play_song.proto</summary>
  public static partial class PlaySongReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/Models/Packets/play_song.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlaySongReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cidwcm90b2J1Zi9Nb2RlbHMvUGFja2V0cy9wbGF5X3NvbmcucHJvdG8SKFRv",
            "dXJuYW1lbnRBc3Npc3RhbnRTaGFyZWQuTW9kZWxzLlBhY2tldHMaKXByb3Rv",
            "YnVmL01vZGVscy9nYW1lcGxheV9wYXJhbWV0ZXJzLnByb3RvIvIBCghQbGF5",
            "U29uZxJRChNnYW1lcGxheV9wYXJhbWV0ZXJzGAEgASgLMjQuVG91cm5hbWVu",
            "dEFzc2lzdGFudFNoYXJlZC5Nb2RlbHMuR2FtZXBsYXlQYXJhbWV0ZXJzEhsK",
            "E2Zsb2F0aW5nX3Njb3JlYm9hcmQYAiABKAgSEwoLc3RyZWFtX3N5bmMYAyAB",
            "KAgSFQoNZGlzYWJsZV9wYXVzZRgEIAEoCBIlCh1kaXNhYmxlX3Njb3Jlc2Fi",
            "ZXJfc3VibWlzc2lvbhgGIAEoCBIjChtzaG93X25vcm1hbF9ub3Rlc19vbl9z",
            "dHJlYW0YByABKAhCK6oCKFRvdXJuYW1lbnRBc3Npc3RhbnRTaGFyZWQuTW9k",
            "ZWxzLlBhY2tldHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TournamentAssistantShared.Models.GameplayParametersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TournamentAssistantShared.Models.Packets.PlaySong), global::TournamentAssistantShared.Models.Packets.PlaySong.Parser, new[]{ "GameplayParameters", "FloatingScoreboard", "StreamSync", "DisablePause", "DisableScoresaberSubmission", "ShowNormalNotesOnStream" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlaySong : pb::IMessage<PlaySong>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlaySong> _parser = new pb::MessageParser<PlaySong>(() => new PlaySong());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlaySong> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TournamentAssistantShared.Models.Packets.PlaySongReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySong() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySong(PlaySong other) : this() {
      gameplayParameters_ = other.gameplayParameters_ != null ? other.gameplayParameters_.Clone() : null;
      floatingScoreboard_ = other.floatingScoreboard_;
      streamSync_ = other.streamSync_;
      disablePause_ = other.disablePause_;
      disableScoresaberSubmission_ = other.disableScoresaberSubmission_;
      showNormalNotesOnStream_ = other.showNormalNotesOnStream_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlaySong Clone() {
      return new PlaySong(this);
    }

    /// <summary>Field number for the "gameplay_parameters" field.</summary>
    public const int GameplayParametersFieldNumber = 1;
    private global::TournamentAssistantShared.Models.GameplayParameters gameplayParameters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TournamentAssistantShared.Models.GameplayParameters GameplayParameters {
      get { return gameplayParameters_; }
      set {
        gameplayParameters_ = value;
      }
    }

    /// <summary>Field number for the "floating_scoreboard" field.</summary>
    public const int FloatingScoreboardFieldNumber = 2;
    private bool floatingScoreboard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FloatingScoreboard {
      get { return floatingScoreboard_; }
      set {
        floatingScoreboard_ = value;
      }
    }

    /// <summary>Field number for the "stream_sync" field.</summary>
    public const int StreamSyncFieldNumber = 3;
    private bool streamSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StreamSync {
      get { return streamSync_; }
      set {
        streamSync_ = value;
      }
    }

    /// <summary>Field number for the "disable_pause" field.</summary>
    public const int DisablePauseFieldNumber = 4;
    private bool disablePause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisablePause {
      get { return disablePause_; }
      set {
        disablePause_ = value;
      }
    }

    /// <summary>Field number for the "disable_scoresaber_submission" field.</summary>
    public const int DisableScoresaberSubmissionFieldNumber = 6;
    private bool disableScoresaberSubmission_;
    /// <summary>
    /// bool disable_fail = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DisableScoresaberSubmission {
      get { return disableScoresaberSubmission_; }
      set {
        disableScoresaberSubmission_ = value;
      }
    }

    /// <summary>Field number for the "show_normal_notes_on_stream" field.</summary>
    public const int ShowNormalNotesOnStreamFieldNumber = 7;
    private bool showNormalNotesOnStream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowNormalNotesOnStream {
      get { return showNormalNotesOnStream_; }
      set {
        showNormalNotesOnStream_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlaySong);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlaySong other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(GameplayParameters, other.GameplayParameters)) return false;
      if (FloatingScoreboard != other.FloatingScoreboard) return false;
      if (StreamSync != other.StreamSync) return false;
      if (DisablePause != other.DisablePause) return false;
      if (DisableScoresaberSubmission != other.DisableScoresaberSubmission) return false;
      if (ShowNormalNotesOnStream != other.ShowNormalNotesOnStream) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (gameplayParameters_ != null) hash ^= GameplayParameters.GetHashCode();
      if (FloatingScoreboard != false) hash ^= FloatingScoreboard.GetHashCode();
      if (StreamSync != false) hash ^= StreamSync.GetHashCode();
      if (DisablePause != false) hash ^= DisablePause.GetHashCode();
      if (DisableScoresaberSubmission != false) hash ^= DisableScoresaberSubmission.GetHashCode();
      if (ShowNormalNotesOnStream != false) hash ^= ShowNormalNotesOnStream.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (gameplayParameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameplayParameters);
      }
      if (FloatingScoreboard != false) {
        output.WriteRawTag(16);
        output.WriteBool(FloatingScoreboard);
      }
      if (StreamSync != false) {
        output.WriteRawTag(24);
        output.WriteBool(StreamSync);
      }
      if (DisablePause != false) {
        output.WriteRawTag(32);
        output.WriteBool(DisablePause);
      }
      if (DisableScoresaberSubmission != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableScoresaberSubmission);
      }
      if (ShowNormalNotesOnStream != false) {
        output.WriteRawTag(56);
        output.WriteBool(ShowNormalNotesOnStream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (gameplayParameters_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GameplayParameters);
      }
      if (FloatingScoreboard != false) {
        output.WriteRawTag(16);
        output.WriteBool(FloatingScoreboard);
      }
      if (StreamSync != false) {
        output.WriteRawTag(24);
        output.WriteBool(StreamSync);
      }
      if (DisablePause != false) {
        output.WriteRawTag(32);
        output.WriteBool(DisablePause);
      }
      if (DisableScoresaberSubmission != false) {
        output.WriteRawTag(48);
        output.WriteBool(DisableScoresaberSubmission);
      }
      if (ShowNormalNotesOnStream != false) {
        output.WriteRawTag(56);
        output.WriteBool(ShowNormalNotesOnStream);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (gameplayParameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameplayParameters);
      }
      if (FloatingScoreboard != false) {
        size += 1 + 1;
      }
      if (StreamSync != false) {
        size += 1 + 1;
      }
      if (DisablePause != false) {
        size += 1 + 1;
      }
      if (DisableScoresaberSubmission != false) {
        size += 1 + 1;
      }
      if (ShowNormalNotesOnStream != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlaySong other) {
      if (other == null) {
        return;
      }
      if (other.gameplayParameters_ != null) {
        if (gameplayParameters_ == null) {
          GameplayParameters = new global::TournamentAssistantShared.Models.GameplayParameters();
        }
        GameplayParameters.MergeFrom(other.GameplayParameters);
      }
      if (other.FloatingScoreboard != false) {
        FloatingScoreboard = other.FloatingScoreboard;
      }
      if (other.StreamSync != false) {
        StreamSync = other.StreamSync;
      }
      if (other.DisablePause != false) {
        DisablePause = other.DisablePause;
      }
      if (other.DisableScoresaberSubmission != false) {
        DisableScoresaberSubmission = other.DisableScoresaberSubmission;
      }
      if (other.ShowNormalNotesOnStream != false) {
        ShowNormalNotesOnStream = other.ShowNormalNotesOnStream;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (gameplayParameters_ == null) {
              GameplayParameters = new global::TournamentAssistantShared.Models.GameplayParameters();
            }
            input.ReadMessage(GameplayParameters);
            break;
          }
          case 16: {
            FloatingScoreboard = input.ReadBool();
            break;
          }
          case 24: {
            StreamSync = input.ReadBool();
            break;
          }
          case 32: {
            DisablePause = input.ReadBool();
            break;
          }
          case 48: {
            DisableScoresaberSubmission = input.ReadBool();
            break;
          }
          case 56: {
            ShowNormalNotesOnStream = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (gameplayParameters_ == null) {
              GameplayParameters = new global::TournamentAssistantShared.Models.GameplayParameters();
            }
            input.ReadMessage(GameplayParameters);
            break;
          }
          case 16: {
            FloatingScoreboard = input.ReadBool();
            break;
          }
          case 24: {
            StreamSync = input.ReadBool();
            break;
          }
          case 32: {
            DisablePause = input.ReadBool();
            break;
          }
          case 48: {
            DisableScoresaberSubmission = input.ReadBool();
            break;
          }
          case 56: {
            ShowNormalNotesOnStream = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
