// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protobuf/Models/score.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TournamentAssistantShared.Models {

  /// <summary>Holder for reflection information generated from protobuf/Models/score.proto</summary>
  public static partial class ScoreReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/Models/score.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chtwcm90b2J1Zi9Nb2RlbHMvc2NvcmUucHJvdG8SIFRvdXJuYW1lbnRBc3Np",
            "c3RhbnRTaGFyZWQuTW9kZWxzGilwcm90b2J1Zi9Nb2RlbHMvZ2FtZXBsYXlf",
            "cGFyYW1ldGVycy5wcm90byK4AQoFU2NvcmUSEAoIZXZlbnRfaWQYASABKAkS",
            "SAoKcGFyYW1ldGVycxgCIAEoCzI0LlRvdXJuYW1lbnRBc3Npc3RhbnRTaGFy",
            "ZWQuTW9kZWxzLkdhbWVwbGF5UGFyYW1ldGVycxIPCgd1c2VyX2lkGAMgASgJ",
            "EhAKCHVzZXJuYW1lGAQgASgJEg0KBXNjb3JlGAUgASgFEhIKCmZ1bGxfY29t",
            "Ym8YBiABKAgSDQoFY29sb3IYByABKAlCI6oCIFRvdXJuYW1lbnRBc3Npc3Rh",
            "bnRTaGFyZWQuTW9kZWxzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::TournamentAssistantShared.Models.GameplayParametersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TournamentAssistantShared.Models.Score), global::TournamentAssistantShared.Models.Score.Parser, new[]{ "EventId", "Parameters", "UserId", "Username", "Score_", "FullCombo", "Color" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Score : pb::IMessage<Score>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Score> _parser = new pb::MessageParser<Score>(() => new Score());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Score> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TournamentAssistantShared.Models.ScoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score(Score other) : this() {
      eventId_ = other.eventId_;
      parameters_ = other.parameters_ != null ? other.parameters_.Clone() : null;
      userId_ = other.userId_;
      username_ = other.username_;
      score_ = other.score_;
      fullCombo_ = other.fullCombo_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Score Clone() {
      return new Score(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private global::TournamentAssistantShared.Models.GameplayParameters parameters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TournamentAssistantShared.Models.GameplayParameters Parameters {
      get { return parameters_; }
      set {
        parameters_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 3;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 4;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int Score_FieldNumber = 5;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score_ {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "full_combo" field.</summary>
    public const int FullComboFieldNumber = 6;
    private bool fullCombo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FullCombo {
      get { return fullCombo_; }
      set {
        fullCombo_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Score);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Score other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (!object.Equals(Parameters, other.Parameters)) return false;
      if (UserId != other.UserId) return false;
      if (Username != other.Username) return false;
      if (Score_ != other.Score_) return false;
      if (FullCombo != other.FullCombo) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (parameters_ != null) hash ^= Parameters.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Score_ != 0) hash ^= Score_.GetHashCode();
      if (FullCombo != false) hash ^= FullCombo.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (Score_ != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score_);
      }
      if (FullCombo != false) {
        output.WriteRawTag(48);
        output.WriteBool(FullCombo);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (parameters_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Parameters);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserId);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Username);
      }
      if (Score_ != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Score_);
      }
      if (FullCombo != false) {
        output.WriteRawTag(48);
        output.WriteBool(FullCombo);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (parameters_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parameters);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Score_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score_);
      }
      if (FullCombo != false) {
        size += 1 + 1;
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Score other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.parameters_ != null) {
        if (parameters_ == null) {
          Parameters = new global::TournamentAssistantShared.Models.GameplayParameters();
        }
        Parameters.MergeFrom(other.Parameters);
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Score_ != 0) {
        Score_ = other.Score_;
      }
      if (other.FullCombo != false) {
        FullCombo = other.FullCombo;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::TournamentAssistantShared.Models.GameplayParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 40: {
            Score_ = input.ReadInt32();
            break;
          }
          case 48: {
            FullCombo = input.ReadBool();
            break;
          }
          case 58: {
            Color = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            if (parameters_ == null) {
              Parameters = new global::TournamentAssistantShared.Models.GameplayParameters();
            }
            input.ReadMessage(Parameters);
            break;
          }
          case 26: {
            UserId = input.ReadString();
            break;
          }
          case 34: {
            Username = input.ReadString();
            break;
          }
          case 40: {
            Score_ = input.ReadInt32();
            break;
          }
          case 48: {
            FullCombo = input.ReadBool();
            break;
          }
          case 58: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
