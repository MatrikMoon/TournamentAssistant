// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "pushes.proto" (package "proto.packets", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Beatmap } from './models.js';
import { User } from './models.js';
import { RealtimeScore } from './models.js';
/**
 * ---- Pushes (SUBMIT something!) ---- //
 *
 * @generated from protobuf message proto.packets.Push
 */
export interface Push {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "realtimeScore";
        /**
         * @generated from protobuf field: proto.models.RealtimeScore realtime_score = 1;
         */
        realtimeScore: RealtimeScore;
    } | {
        oneofKind: "songFinished";
        /**
         * @generated from protobuf field: proto.packets.Push.SongFinished song_finished = 2;
         */
        songFinished: Push_SongFinished;
    } | {
        oneofKind: "discordAuthorized";
        /**
         * @generated from protobuf field: proto.packets.Push.DiscordAuthorized discord_authorized = 3;
         */
        discordAuthorized: Push_DiscordAuthorized;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packets.Push.SongFinished
 */
export interface Push_SongFinished {
    /**
     * @generated from protobuf field: proto.models.User player = 1;
     */
    player?: User;
    /**
     * @generated from protobuf field: proto.models.Beatmap beatmap = 2;
     */
    beatmap?: Beatmap;
    /**
     * @generated from protobuf field: proto.packets.Push.SongFinished.CompletionType type = 3;
     */
    type: Push_SongFinished_CompletionType;
    /**
     * @generated from protobuf field: int32 score = 4;
     */
    score: number;
}
/**
 * @generated from protobuf enum proto.packets.Push.SongFinished.CompletionType
 */
export enum Push_SongFinished_CompletionType {
    /**
     * @generated from protobuf enum value: Passed = 0;
     */
    Passed = 0,
    /**
     * @generated from protobuf enum value: Failed = 1;
     */
    Failed = 1,
    /**
     * @generated from protobuf enum value: Quit = 2;
     */
    Quit = 2
}
/**
 * @generated from protobuf message proto.packets.Push.DiscordAuthorized
 */
export interface Push_DiscordAuthorized {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string token = 2;
     */
    token: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Push$Type extends MessageType<Push> {
    constructor() {
        super("proto.packets.Push", [
            { no: 1, name: "realtime_score", kind: "message", oneof: "data", T: () => RealtimeScore },
            { no: 2, name: "song_finished", kind: "message", oneof: "data", T: () => Push_SongFinished },
            { no: 3, name: "discord_authorized", kind: "message", oneof: "data", T: () => Push_DiscordAuthorized }
        ]);
    }
    create(value?: PartialMessage<Push>): Push {
        const message = { data: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push): Push {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.RealtimeScore realtime_score */ 1:
                    message.data = {
                        oneofKind: "realtimeScore",
                        realtimeScore: RealtimeScore.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).realtimeScore)
                    };
                    break;
                case /* proto.packets.Push.SongFinished song_finished */ 2:
                    message.data = {
                        oneofKind: "songFinished",
                        songFinished: Push_SongFinished.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).songFinished)
                    };
                    break;
                case /* proto.packets.Push.DiscordAuthorized discord_authorized */ 3:
                    message.data = {
                        oneofKind: "discordAuthorized",
                        discordAuthorized: Push_DiscordAuthorized.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).discordAuthorized)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.RealtimeScore realtime_score = 1; */
        if (message.data.oneofKind === "realtimeScore")
            RealtimeScore.internalBinaryWrite(message.data.realtimeScore, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.packets.Push.SongFinished song_finished = 2; */
        if (message.data.oneofKind === "songFinished")
            Push_SongFinished.internalBinaryWrite(message.data.songFinished, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packets.Push.DiscordAuthorized discord_authorized = 3; */
        if (message.data.oneofKind === "discordAuthorized")
            Push_DiscordAuthorized.internalBinaryWrite(message.data.discordAuthorized, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Push
 */
export const Push = new Push$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Push_SongFinished$Type extends MessageType<Push_SongFinished> {
    constructor() {
        super("proto.packets.Push.SongFinished", [
            { no: 1, name: "player", kind: "message", T: () => User },
            { no: 2, name: "beatmap", kind: "message", T: () => Beatmap },
            { no: 3, name: "type", kind: "enum", T: () => ["proto.packets.Push.SongFinished.CompletionType", Push_SongFinished_CompletionType] },
            { no: 4, name: "score", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Push_SongFinished>): Push_SongFinished {
        const message = { type: 0, score: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push_SongFinished>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push_SongFinished): Push_SongFinished {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.models.User player */ 1:
                    message.player = User.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                case /* proto.models.Beatmap beatmap */ 2:
                    message.beatmap = Beatmap.internalBinaryRead(reader, reader.uint32(), options, message.beatmap);
                    break;
                case /* proto.packets.Push.SongFinished.CompletionType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 score */ 4:
                    message.score = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push_SongFinished, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.models.User player = 1; */
        if (message.player)
            User.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.models.Beatmap beatmap = 2; */
        if (message.beatmap)
            Beatmap.internalBinaryWrite(message.beatmap, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.packets.Push.SongFinished.CompletionType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 score = 4; */
        if (message.score !== 0)
            writer.tag(4, WireType.Varint).int32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Push.SongFinished
 */
export const Push_SongFinished = new Push_SongFinished$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Push_DiscordAuthorized$Type extends MessageType<Push_DiscordAuthorized> {
    constructor() {
        super("proto.packets.Push.DiscordAuthorized", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Push_DiscordAuthorized>): Push_DiscordAuthorized {
        const message = { success: false, token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Push_DiscordAuthorized>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push_DiscordAuthorized): Push_DiscordAuthorized {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string token */ 2:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Push_DiscordAuthorized, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string token = 2; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.packets.Push.DiscordAuthorized
 */
export const Push_DiscordAuthorized = new Push_DiscordAuthorized$Type();
